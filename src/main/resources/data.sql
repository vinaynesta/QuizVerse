-- Easy Questions
INSERT INTO question (question_text, option_a, option_b, option_c, option_d, correct_answer) 
VALUES 
('What is a correct syntax to output "Hello World" in Java?', 'Console.WriteLine("Hello World");', 'System.out.println("Hello World");', 'print("Hello World");', 'echo("Hello World");', 'System.out.println("Hello World");'),
('Which data type is used to create a variable that should store text?', 'string', 'String', 'txt', 'myString', 'String'),
('How do you create a single line comment in Java?', '//', '/*', '#', '--', '//'),
('Which operator is used to add together two values?', '.', '+', '&', '*', '+'),
('What is the correct way to create an object called myObj of MyClass?', 'class MyClass = new myObj();', 'new myObj = MyClass();', 'MyClass myObj = new MyClass();', 'class myObj = new MyClass();', 'MyClass myObj = new MyClass();'),
('Array indexes start with:', '-1', '0', '1', '2', '0'),
('What is the correct way to declare an integer variable in Java?', 'num x;', 'x = int;', 'int x;', 'integer x;', 'int x;'),
('Which method can be used to find the length of a string?', 'getSize()', 'len()', 'length()', 'size()', 'length()'),
('What is the correct way to declare a constant variable in Java?', 'const', 'constant', 'final', 'static', 'final'),
('How do you start writing a while loop in Java?', 'while x > y:', 'while(x > y)', 'x > y while {', 'while x > y {', 'while(x > y)'),
('Which keyword is used to define a class in Java?', 'class', 'define', 'struct', 'type', 'class'),
('What is the extension of a Java source file?', '.java', '.class', '.js', '.jv', '.java'),
('Which keyword is used to define a method in Java?', 'method', 'function', 'void', 'def', 'void'),
('Which keyword is used to inherit a class in Java?', 'extends', 'implements', 'inherits', 'derive', 'extends'),
('What does JVM stand for?', 'Java Virtual Machine', 'Java Variable Method', 'Just Virtual Machine', 'Java Verified Method', 'Java Virtual Machine'),
('Which keyword is used to return a value from a method?', 'return', 'give', 'output', 'exit', 'return'),
('What will be the default value of a boolean in Java?', 'true', 'false', 'null', '0', 'false'),
('Which operator is used for logical AND in Java?', '&&', '&', 'and', '||', '&&'),
('What is the default constructor?', 'Constructor with no parameters', 'Constructor with one parameter', 'Private constructor', 'Static constructor', 'Constructor with no parameters'),
('What is the size of an int in Java?', '4 bytes', '2 bytes', '8 bytes', '1 byte', '4 bytes'),
('What is the size of a long in Java?', '4 bytes', '2 bytes', '8 bytes', '1 byte', '8 bytes'),
('What is the size of a float in Java?', '4 bytes', '2 bytes', '8 bytes', '1 byte', '4 bytes'),
('What is the size of a double in Java?', '4 bytes', '2 bytes', '8 bytes', '1 byte', '8 bytes'),
('What is the size of a char in Java?', '2 bytes', '1 byte', '4 bytes', '8 bytes', '2 bytes'),
('What is the size of a boolean in Java?', '1 byte', '2 bytes', '4 bytes', '8 bytes', '1 byte'),


-- Medium Questions
('What is the difference between JDK and JRE?', 'JDK is for development, JRE is for running', 'They are the same thing', 'JRE is for development, JDK is for running', 'Neither is used anymore', 'JDK is for development, JRE is for running'),
('What is method overloading in Java?', 'Same method name with different parameters', 'Same method in parent and child', 'Different method names with same parameters', 'None of these', 'Same method name with different parameters'),
('What is the purpose of the "break" statement in Java?', 'To exit a loop or switch', 'To skip one iteration', 'To continue execution', 'To throw an exception', 'To exit a loop or switch'),
('What is a marker interface in Java?', 'Interface with no methods', 'Interface with one method', 'Interface with static methods', 'Interface with default methods', 'Interface with no methods'),
('What is the difference between ArrayList and LinkedList?', 'No difference', 'ArrayList uses array, LinkedList uses double linked list', 'LinkedList is faster', 'ArrayList is always better', 'ArrayList uses array, LinkedList uses double linked list'),
('What is the purpose of the "volatile" keyword?', 'Thread safety', 'Performance improvement', 'Memory management', 'Exception handling', 'Thread safety'),
('What is the difference between "==" and ".equals()" in Java?', 'No difference', 'One for primitives, one for objects', 'One is faster', 'One is deprecated', 'One for primitives, one for objects'),
('What is the purpose of the "synchronized" keyword?', 'Thread safety', 'Memory management', 'Exception handling', 'Performance improvement', 'Thread safety'),
('What is a daemon thread in Java?', 'Background thread', 'Main thread', 'User thread', 'System thread', 'Background thread'),
('What is the purpose of the "finally" block?', 'Always executes after try-catch', 'Optional block', 'Alternative to catch', 'Error handling', 'Always executes after try-catch'),
('What is method overriding in Java?', 'Child class defines same method as parent', 'Multiple methods with same name', 'Method with different return type', 'Abstract method implementation', 'Child class defines same method as parent'),
('What is the purpose of a constructor?', 'Initialize objects', 'Destroy objects', 'Compile code', 'Run main method', 'Initialize objects'),
('What is a static method?', 'Method that belongs to the class, not object', 'Method that runs automatically', 'Method in static class', 'Method that canâ€™t be called', 'Method that belongs to the class, not object'),
('What is encapsulation in Java?', 'Wrapping data and code together', 'Inheritance concept', 'Overloading methods', 'Hiding code', 'Wrapping data and code together'),
('How many types of constructors are there in Java?', '2', '1', '3', '4', '2'),
('What is the default access modifier in Java?', 'Package-private', 'Public', 'Private', 'Protected', 'Package-private'),
('What does the final keyword mean when used with a variable?', 'Value cannot be changed', 'Variable is static', 'Variable is protected', 'Variable is private', 'Value cannot be changed'),
('What is a package in Java?', 'Group of related classes', 'Type of data', 'An IDE', 'A keyword', 'Group of related classes'),
('What is the use of instanceof operator?', 'Check object type at runtime', 'Create object', 'Delete object', 'Cast object', 'Check object type at runtime'),
('Can a constructor be private in Java?', 'Yes', 'No', 'Only in abstract class', 'Only in interface', 'Yes'),
('What is the difference between a class and an interface?', 'Class can have methods, interface cannot', 'Interface can have methods, class cannot', 'Class can inherit multiple interfaces, interface cannot inherit classes', 'Class can inherit multiple classes, interface cannot inherit classes', 'Class can have methods, interface cannot'),
('What is the purpose of the super keyword?', 'Access parent class methods', 'Access child class methods', 'Access static methods', 'Access local methods', 'Access parent class methods'),
('What is the difference between a static and instance variable?', 'Static belongs to class, instance belongs to object', 'Instance belongs to class, static belongs to object', 'Static is faster', 'Instance is faster', 'Static belongs to class, instance belongs to object'),
('What is the difference between a static and instance method?', 'Static belongs to class, instance belongs to object', 'Instance belongs to class, static belongs to object', 'Static is faster', 'Instance is faster', 'Static belongs to class, instance belongs to object'),



-- Hard Questions
('Explain the Diamond Problem in Java:', 'Multiple inheritance issue in interfaces', 'Memory leak in collections', 'Thread deadlock situation', 'Stack overflow in recursion', 'Multiple inheritance issue in interfaces'),
('What is the difference between Callable and Runnable?', 'Callable returns value and throws exception', 'They are the same', 'Runnable is newer', 'Callable is deprecated', 'Callable returns value and throws exception'),
('What is a reentrant lock in Java?', 'Lock that can be acquired multiple times by same thread', 'One-time lock', 'System lock', 'Database lock', 'Lock that can be acquired multiple times by same thread'),
('What is the purpose of weak references in Java?', 'Memory management optimization', 'Performance improvement', 'Exception handling', 'Thread safety', 'Memory management optimization'),
('Explain the concept of memory leaks in Java:', 'Objects that are no longer used but not garbage collected', 'System running out of memory', 'CPU usage too high', 'Disk space full', 'Objects that are no longer used but not garbage collected'),
('What is the difference between fail-fast and fail-safe iterators?', 'Fail-fast throws exception on modification during iteration', 'No difference', 'Fail-safe is newer', 'Fail-fast is deprecated', 'Fail-fast throws exception on modification during iteration'),
('What is the purpose of the Phaser class in Java?', 'Synchronization barrier for dynamic number of threads', 'Database connection', 'File handling', 'Exception management', 'Synchronization barrier for dynamic number of threads'),
('Explain the difference between shallow copy and deep copy:', 'Deep copy creates new objects for nested references', 'They are the same', 'Shallow copy is newer', 'Deep copy is deprecated', 'Deep copy creates new objects for nested references'),
('What is the purpose of the sun.misc.Unsafe class?', 'Low-level system operations', 'GUI development', 'Database operations', 'Web services', 'Low-level system operations'),
('What is the difference between G1 and CMS garbage collectors?', 'G1 is region-based, CMS is concurrent mark sweep', 'They are the same', 'G1 is older', 'CMS is newer', 'G1 is region-based, CMS is concurrent mark sweep'),
('What is the purpose of the transient keyword?', 'Exclude variable from serialization', 'Make variable final', 'Make variable static', 'Include in hashCode', 'Exclude variable from serialization'),
('What is the use of the super keyword?', 'Access parent class methods or constructor', 'Access child class', 'Make variable super', 'None of these', 'Access parent class methods or constructor'),
('Can an interface have static methods in Java 8?', 'Yes', 'No', 'Only private static', 'Only abstract', 'Yes'),
('What is the output of null + "test" in Java?', 'nulltest', 'test', 'null', 'Error', 'nulltest'),
('What is the role of default methods in interfaces?', 'Provide implementation in interface', 'Abstract method only', 'Final method only', 'Static only', 'Provide implementation in interface'),
('What happens if a class has two interfaces with same default method?', 'Compiler error unless overridden', 'Only one is used', 'Runtime error', 'Ignored', 'Compiler error unless overridden'),
('What is a functional interface?', 'Interface with one abstract method', 'Any interface', 'Interface with static method', 'Deprecated interface', 'Interface with one abstract method'),
('What is the use of @FunctionalInterface annotation?', 'Ensure interface has one abstract method', 'Make it abstract', 'Provide default method', 'None', 'Ensure interface has one abstract method'),
('Can enums have constructors?', 'Yes', 'No', 'Only default', 'Only static', 'Yes'),
('What is the result of dividing by zero in Java (int)?', 'ArithmeticException', '0', 'Infinity', 'NaN', 'ArithmeticException'),
('What is the purpose of the wait() method in Java?', 'Thread communication', 'Memory management', 'Exception handling', 'Performance improvement', 'Thread communication'),
('What is the difference between a volatile and a non-volatile variable?', 'Volatile is thread-safe, non-volatile is not', 'Volatile is faster, non-volatile is slower', 'Volatile is deprecated, non-volatile is not', 'Volatile is not thread-safe, non-volatile is thread-safe', 'Volatile is thread-safe, non-volatile is not'),
('What is the purpose of the finalize() method?', 'Garbage collection', 'Memory management', 'Exception handling', 'Thread safety', 'Garbage collection'),
('What is the difference between a checked and unchecked exception?', 'Checked throwable, unchecked RuntimeException', 'Checked RuntimeException, unchecked throwable', 'Checked is newer, unchecked is older', 'Checked is deprecated, unchecked is not', 'Checked throwable, unchecked RuntimeException'),



-- Very Hard Questions
('What is the purpose of the Class.forName() method?', 'Load class at runtime', 'Memory management', 'Exception handling', 'Performance improvement', 'Load class at runtime'),
('What is the difference between a local variable and an instance variable?', 'Local belongs to method, instance belongs to object', 'Instance belongs to method, local belongs to object', 'Local is faster, instance is slower', 'Local is deprecated, instance is not', 'Local belongs to method, instance belongs to object'),
('What is the purpose of the ClassLoader?', 'Load classes at runtime', 'Memory management', 'Exception handling', 'Thread safety', 'Load classes at runtime'),
('What is the difference between a static and instance block?', 'Static belongs to class, instance belongs to object', 'Instance belongs to class, static belongs to object', 'Static is faster, instance is slower', 'Static is deprecated, instance is not', 'Static belongs to class, instance belongs to object'),
('What does the ForkJoinPool framework do?', 'Parallelism using fork/join tasks', 'Handles GUI tasks', 'Manages files', 'Database pool manager', 'Parallelism using fork/join tasks'),
('What is Metaspace in Java?', 'Memory area for class metadata', 'Heap memory', 'Thread stack memory', 'Code cache', 'Memory area for class metadata'),
('What is the use of MethodHandles in Java?', 'Low-level method invocation', 'Handles streams', 'Exception handling', 'None', 'Low-level method invocation'),
('What is invokedynamic instruction used for?', 'Runtime method linkage for lambdas', 'Static method call', 'Interface call', 'Constructor call', 'Runtime method linkage for lambdas'),
('What is varhandle in Java?', 'Provides access to variables like fields/arrays', 'Handle method overloading', 'Thread pool handler', 'None', 'Provides access to variables like fields/arrays'),
('What is the role of the PermGen space?', 'Store class metadata (prior to Java 8)', 'Heap memory', 'Stack memory', 'Thread context', 'Store class metadata (prior to Java 8)'),
('What does the term "escape analysis" refer to?', 'Optimization to decide allocation scope', 'Memory leak', 'Thread error', 'Null analysis', 'Optimization to decide allocation scope'),
('What is off-heap memory in Java?', 'Memory outside JVM heap', 'Part of heap', 'Thread memory', 'Stack memory', 'Memory outside JVM heap'),
('What is the significance of Record classes in Java 14+?', 'Immutable data carriers with compact syntax', 'Mutable data class', 'Thread-safe class', 'None', 'Immutable data carriers with compact syntax'),
('How does the Z Garbage Collector work?', 'Low-latency garbage collection with concurrent phases', 'Mark-sweep only', 'Pauses all threads', 'Copying GC', 'Low-latency garbage collection with concurrent phases'),




-- Advanced Java 8+ Features
('What is the purpose of Optional in Java?', 'Null pointer handling', 'Performance improvement', 'Exception handling', 'Memory management', 'Null pointer handling'),
('Explain method references in Java 8:', 'Shorthand notation for lambda expressions', 'Exception handling', 'Memory management', 'Thread safety', 'Shorthand notation for lambda expressions'),
('What is the difference between map and flatMap?', 'flatMap handles nested streams', 'No difference', 'map is newer', 'flatMap is deprecated', 'flatMap handles nested streams'),
('What are the benefits of the Stream API?', 'Functional style operations on collections', 'Database management', 'File handling', 'GUI development', 'Functional style operations on collections'),
('What is a CompletableFuture?', 'Asynchronous computation builder', 'Database connection', 'File handler', 'Thread pool', 'Asynchronous computation builder'),
('What is the purpose of the jmap command?', 'Memory analysis tool', 'Thread management', 'File handling', 'Database operations', 'Memory analysis tool'),
('What is the difference between a soft reference and a weak reference?', 'Soft references are eligible for garbage collection, weak references are not', 'Soft references are faster, weak references are slower', 'Soft references are deprecated, weak references are not', 'Soft references are not thread-safe, weak references are thread-safe', 'Soft references are eligible for garbage collection, weak references are not'),
('What is the purpose of the jstack command?', 'Thread stack dump', 'Memory dump', 'File dump', 'Database dump', 'Thread stack dump'),
('What is the purpose of the jstat command?', 'Performance monitoring', 'Memory management', 'Exception handling', 'Thread safety', 'Performance monitoring'),
('What is the purpose of the jconsole command?', 'Java application monitoring', 'Thread management', 'File handling', 'Database operations', 'Java application monitoring'),


-- Spring Framework Questions
('What is Dependency Injection?', 'Inversion of Control principle', 'Database connection', 'File handling', 'Exception management', 'Inversion of Control principle'),
('What is the difference between @Component and @Bean?', '@Component for classes, @Bean for methods', 'No difference', '@Bean is newer', '@Component is deprecated', '@Component for classes, @Bean for methods'),
('What is the purpose of @Autowired?', 'Automatic dependency injection', 'Exception handling', 'Database connection', 'File handling', 'Automatic dependency injection'),
('Explain the Spring Bean lifecycle:', 'Instantiation, population, custom init, destruction', 'Simple creation and deletion', 'No specific lifecycle', 'Random process', 'Instantiation, population, custom init, destruction'),
('What is the difference between @RequestMapping and @GetMapping?', '@GetMapping is specific to GET requests', 'No difference', '@RequestMapping is newer', '@GetMapping is deprecated', '@GetMapping is specific to GET requests'),
('What is the purpose of @Value annotation?', 'Inject values from properties file', 'Exception handling', 'Database connection', 'File handling', 'Inject values from properties file'),
('What is the purpose of @ConfigurationProperties annotation?', 'Bind properties to configuration classes', 'Exception handling', 'Database connection', 'File handling', 'Bind properties to configuration classes'),
('What is the purpose of @ComponentScan annotation?', 'Scan for components, configurations, and services', 'Exception handling', 'Database connection', 'File handling', 'Scan for components, configurations, and services'),
('What is the purpose of @Bean annotation?', 'Define a bean in a configuration class', 'Exception handling', 'Database connection', 'File handling', 'Define a bean in a configuration class'),
('What is the purpose of @Component annotation?', 'Mark class as a component', 'Exception handling', 'Database connection', 'File handling', 'Mark class as a component'),
('What is the purpose of @Configuration annotation?', 'Mark class as a configuration class', 'Exception handling', 'Database connection', 'File handling', 'Mark class as a configuration class'),
('What is the purpose of @EnableAutoConfiguration annotation?', 'Enable auto-configuration of Spring application', 'Exception handling', 'Database connection', 'File handling', 'Enable auto-configuration of Spring application'),
('What is the purpose of @SpringBootApplication annotation?', 'Mark class as a Spring Boot application', 'Exception handling', 'Database connection', 'File handling', 'Mark class as a Spring Boot application'),
('What is the purpose of @SpringBootConfiguration annotation?', 'Mark class as a Spring Boot configuration', 'Exception handling', 'Database connection', 'File handling', 'Mark class as a Spring Boot configuration'),
('What is the purpose of @SpringBootTest annotation?', 'Mark class as a Spring Boot test', 'Exception handling', 'Database connection', 'File handling', 'Mark class as a Spring Boot test'),


-- Design Patterns
('What is the Singleton pattern?', 'Ensures single instance of class', 'Multiple instances', 'Database pattern', 'GUI pattern', 'Ensures single instance of class'),
('Explain the Factory pattern:', 'Creates objects without exposing creation logic', 'Database management', 'File handling', 'Exception handling', 'Creates objects without exposing creation logic'),
('What is the Observer pattern?', 'One-to-many dependency between objects', 'Database pattern', 'File pattern', 'GUI pattern', 'One-to-many dependency between objects'),
('What is the Strategy pattern?', 'Family of algorithms made interchangeable', 'Database strategy', 'File handling', 'Exception handling', 'Family of algorithms made interchangeable'),
('Explain the Builder pattern:', 'Constructs complex objects step by step', 'Database building', 'File handling', 'Exception handling', 'Constructs complex objects step by step'),
('What is the Prototype pattern?', 'Create new objects by cloning existing ones', 'Database pattern', 'File handling', 'Exception handling', 'Create new objects by cloning existing ones'),
('What is the Decorator pattern?', 'Add behavior dynamically to objects', 'Database pattern', 'File handling', 'Exception handling', 'Add behavior dynamically to objects'),
('What is the Adapter pattern?', 'Convert interface of a class into another interface clients expect', 'Database pattern', 'File handling', 'Exception handling', 'Convert interface of a class into another interface clients expect'),
('What is the Proxy pattern?', 'Provide a surrogate or placeholder for another object', 'Database pattern', 'File handling', 'Exception handling', 'Provide a surrogate or placeholder for another object'),
('What is the Bridge pattern?', 'Decouple abstraction from implementation', 'Database pattern', 'File handling', 'Exception handling', 'Decouple abstraction from implementation'),
('What is the Composite pattern?', 'Structure objects as tree structures to represent part-whole hierarchies', 'Database pattern', 'File handling', 'Exception handling', 'Structure objects as tree structures to represent part-whole hierarchies'),
('What is the Chain of Responsibility pattern?', 'Avoid coupling the sender of a request to its receiver by giving multiple objects a chance to handle the request', 'Database pattern', 'File handling', 'Exception handling', 'Avoid coupling the sender of a request to its receiver by giving multiple objects a chance to handle the request'),
('What is the Command pattern?', 'Encapsulate a request as an object, thereby allowing for parameterization of clients with different requests, and the queuing of requests, and the support of undoable operations', 'Database pattern', 'File handling', 'Exception handling', 'Encapsulate a request as an object, thereby allowing for parameterization of clients with different requests, and the queuing of requests, and the support of undoable operations'),
('What is the State pattern?', 'Allow an object to alter its behavior when its internal state changes', 'Database pattern', 'File handling', 'Exception handling', 'Allow an object to alter its behavior when its internal state changes'),
('What is the Template Method pattern?', 'Define the program skeleton of an algorithm in a method, deferring some steps to subclasses', 'Database pattern', 'File handling', 'Exception handling', 'Define the program skeleton of an algorithm in a method, deferring some steps to subclasses'),
('What is the Mediator pattern?', 'Define an object that encapsulates how a set of objects interact', 'Database pattern', 'File handling', 'Exception handling', 'Define an object that encapsulates how a set of objects interact'),
('What is the Visitor pattern?', 'Represent an operation to be performed on the elements of an object structure', 'Database pattern', 'File handling', 'Exception handling', 'Represent an operation to be performed on the elements of an object structure'),
('What is the Interpreter pattern?', 'Provide a way to evaluate language grammar or expressions', 'Database pattern', 'File handling', 'Exception handling', 'Provide a way to evaluate language grammar or expressions'),
('What is the Memento pattern?', 'Capture and restore an object\s internal state without violating encapsulation', 'Database pattern', 'File handling', 'Exception handling', 'Capture and restore an object\s internal state without violating encapsulation'),
('What is the Null Object pattern?', 'Provide a default object to avoid null checks', 'Database pattern', 'File handling', 'Exception handling', 'Provide a default object to avoid null checks'),



-- Concurrency and Multithreading
('What is thread pooling?', 'Reuse of multiple threads', 'Database connection pool', 'File handling', 'Exception management', 'Reuse of multiple threads'),
('Explain the producer-consumer problem:', 'Synchronization between threads sharing buffer', 'Database issue', 'File handling', 'Memory management', 'Synchronization between threads sharing buffer'),
('What is a race condition?', 'Timing dependent code defect', 'Performance issue', 'Memory leak', 'Database error', 'Timing dependent code defect'),
('What is the purpose of the CountDownLatch?', 'Synchronization aid that allows threads to wait', 'Database connection', 'File handling', 'Exception handling', 'Synchronization aid that allows threads to wait'),
('Explain thread starvation:', 'Thread unable to gain regular access to shared resources', 'Memory issue', 'Database error', 'File handling error', 'Thread unable to gain regular access to shared resources'),

-- Java Memory Management
('What is the purpose of the String pool?', 'Memory optimization for string literals', 'Database connection pool', 'Thread pool', 'Exception handling', 'Memory optimization for string literals'),
('Explain the OutOfMemoryError:', 'JVM cannot allocate object due to no memory', 'Database error', 'File error', 'Thread error', 'JVM cannot allocate object due to no memory'),
('What is garbage collection in Java?', 'Automatic memory management', 'File cleaning', 'Database cleanup', 'Thread cleanup', 'Automatic memory management'),
('What is the difference between heap and stack memory?', 'Heap for objects, stack for primitives and references', 'No difference', 'Heap is newer', 'Stack is deprecated', 'Heap for objects, stack for primitives and references'),
('What is memory fragmentation?', 'Scattered unused memory blocks', 'Database issue', 'File system issue', 'Thread issue', 'Scattered unused memory blocks');
